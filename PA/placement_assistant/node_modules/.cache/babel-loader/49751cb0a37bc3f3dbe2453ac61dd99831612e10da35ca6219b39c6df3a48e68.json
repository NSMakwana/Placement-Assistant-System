{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import StudentService from \"../Services/StudentServices\"; \n// import StudentTable from \"./StudentTable\";\n// import Filters from \"./Filters\";\n// import StudentDetails from \"./StudentDetails\";\n// import \"./Dashboard.css\";\n// import { Bar } from \"react-chartjs-2\";  // Importing Bar chart from Chart.js\n// import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\n// ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\n// const Dashboard = () => {\n//   const [studentOption, setStudentOption] = useState(\"\"); // Track selected menu option\n//   const [students, setStudents] = useState([]);\n//   const [filteredStudents, setFilteredStudents] = useState([]);\n//   const [selectedStudent, setSelectedStudent] = useState(null); // Track the selected student\n\n//   // Fetching student data from the API on component mount\n//   useEffect(() => {\n//     StudentService.getStudents()\n//       .then((response) => {\n//         setStudents(response.data);\n//         setFilteredStudents(response.data);\n//       })\n//       .catch((error) => console.error(\"Error fetching students:\", error));\n//   }, []);\n\n//   // Calculate the number of non-placed students\n//   const calculateNonPlacedStudents = () => {\n//     const nonPlacedStudents = students.filter((student) => student.placementStatus !== \"Placed\");\n//     return nonPlacedStudents.length;\n//   };\n//   // Handling button click to select options\n//   const handleOptionClick = (option) => {\n//     setStudentOption(option); // Set the currently selected option\n//     setSelectedStudent(null); // Reset selected student when changing options\n//   };\n\n//   // Handling filter logic\n//   const handleFilter = (key, value) => {\n//     let filtered = students;\n\n//   // If value is an empty string, reset the filter\n//   if (value == \"\") {\n//     filtered = students; // Reset to the full list of students\n//   }\n//     // Apply each filter condition progressively (AND logic)\n//     if (key === \"batch\" && value) {\n//       filtered = filtered.filter((s) => s.batch === value); // Filter by batch\n//     }\n\n//     if (key === \"program\" && value) {\n//       filtered = filtered.filter((s) => s.course === value); // Filter by program\n//     }\n\n//     if (key === \"search\" && value) {\n//       filtered = filtered.filter((s) =>\n//         s.name.toLowerCase().includes(value.toLowerCase()) // Filter by name\n//       );\n//     }\n\n//     if (key === \"sscPercentage\" && value) {\n//       const sscLimit = parseInt(value, 10); // Extract the number from the string like '<60'\n//       filtered = filtered.filter((s) => s.ssc.percentage <= sscLimit); // Filter by SSC percentage\n//     }\n\n//     if (key === \"hscPercentage\" && value) {\n//       const hscLimit = parseInt(value, 10);\n//       filtered = filtered.filter((s) => s.hsc.percentage <= hscLimit); // Filter by HSC percentage\n//     }\n\n//     if (key === \"bachelorPercentage\" && value) {\n//       const bachelorLimit = parseInt(value, 10);\n//       filtered = filtered.filter((s) => s.bachelor.percentage <= bachelorLimit); // Filter by Bachelor's percentage\n//     }\n\n//     if (key === \"drops\" && value) {\n//       filtered = filtered.filter((s) => s.drops == parseInt(value, 10)); // Filter by drops\n//     }\n\n//     setFilteredStudents(filtered); // Update the filtered student list\n//   };\n\n//   // Handling student selection for details view\n//   const handleViewStudent = (student) => {\n//     setSelectedStudent(student); // Set the selected student\n//   };\n\n//   const renderStudentContent = () => {\n//     if (studentOption === \"EnterDetails\") {\n//       return <div>Enter Student Details Form</div>;\n//     }\n\n//     if (studentOption === \"ViewDetails\") {\n//       if (selectedStudent) {\n//         // Render details of the selected student\n//         return (\n//           <div className=\"viewdetails\">\n//             <button\n//               className=\"back-btn\"\n//               onClick={() => setSelectedStudent(null)} // Go back to table\n//             >\n//               <img src=\"/Images/Back.png\" height=\"25px\" width=\"25px\" />\n\n//             </button>\n//             <StudentDetails student={selectedStudent} />\n//           </div>\n//         );\n//       } else {\n//         // Render the table to select a student\n//         return (\n//           <div className=\"viewdetails\">\n//             <Filters onFilter={handleFilter} />\n//             <StudentTable\n//               students={filteredStudents}\n//               onView={handleViewStudent} // Trigger view for selected student\n//             />\n//           </div>\n//         );\n//       }\n//     }\n\n//     if (studentOption === \"DownloadReports\") {\n//       return <div>Download Reports Section</div>;\n//     }\n\n//     // Render nothing or a placeholder if no option is selected\n//     return <div className=\"placeholder\"></div>;\n//   };\n\n//   return (\n//     <div className=\"dashboard\">\n//       {/* Navigation Buttons */}\n//       <div className=\"buttons\">\n//         <button onClick={() => handleOptionClick(\"EnterDetails\")}>\n//           <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Enter Details\n//         </button>\n//         <button onClick={() => handleOptionClick(\"DownloadReports\")}>\n//           <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Download Reports\n//           <img src=\"/Images/download.png\" height=\"18px\" width=\"27px\" />\n//         </button>\n//         <br />\n//         <button onClick={() => handleOptionClick(\"ViewDetails\")}>\n//           <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> View Details\n//         </button>\n//       </div>\n\n//       {/* Main Section */}\n//       <div className=\"main-section\">\n//         {renderStudentContent()}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Dashboard;","map":{"version":3,"names":[],"sources":["E:/Nency/MSc CS/Sem-V/Project-III/Test/placement_assistant/src/Components/Dashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import StudentService from \"../Services/StudentServices\"; \r\n// import StudentTable from \"./StudentTable\";\r\n// import Filters from \"./Filters\";\r\n// import StudentDetails from \"./StudentDetails\";\r\n// import \"./Dashboard.css\";\r\n// import { Bar } from \"react-chartjs-2\";  // Importing Bar chart from Chart.js\r\n// import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\r\n\r\n// ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\r\n\r\n// const Dashboard = () => {\r\n//   const [studentOption, setStudentOption] = useState(\"\"); // Track selected menu option\r\n//   const [students, setStudents] = useState([]);\r\n//   const [filteredStudents, setFilteredStudents] = useState([]);\r\n//   const [selectedStudent, setSelectedStudent] = useState(null); // Track the selected student\r\n\r\n//   // Fetching student data from the API on component mount\r\n//   useEffect(() => {\r\n//     StudentService.getStudents()\r\n//       .then((response) => {\r\n//         setStudents(response.data);\r\n//         setFilteredStudents(response.data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching students:\", error));\r\n//   }, []);\r\n\r\n//   // Calculate the number of non-placed students\r\n//   const calculateNonPlacedStudents = () => {\r\n//     const nonPlacedStudents = students.filter((student) => student.placementStatus !== \"Placed\");\r\n//     return nonPlacedStudents.length;\r\n//   };\r\n//   // Handling button click to select options\r\n//   const handleOptionClick = (option) => {\r\n//     setStudentOption(option); // Set the currently selected option\r\n//     setSelectedStudent(null); // Reset selected student when changing options\r\n//   };\r\n\r\n//   // Handling filter logic\r\n//   const handleFilter = (key, value) => {\r\n//     let filtered = students;\r\n  \r\n\r\n//   // If value is an empty string, reset the filter\r\n//   if (value == \"\") {\r\n//     filtered = students; // Reset to the full list of students\r\n//   }\r\n//     // Apply each filter condition progressively (AND logic)\r\n//     if (key === \"batch\" && value) {\r\n//       filtered = filtered.filter((s) => s.batch === value); // Filter by batch\r\n//     }\r\n  \r\n//     if (key === \"program\" && value) {\r\n//       filtered = filtered.filter((s) => s.course === value); // Filter by program\r\n//     }\r\n  \r\n//     if (key === \"search\" && value) {\r\n//       filtered = filtered.filter((s) =>\r\n//         s.name.toLowerCase().includes(value.toLowerCase()) // Filter by name\r\n//       );\r\n//     }\r\n  \r\n//     if (key === \"sscPercentage\" && value) {\r\n//       const sscLimit = parseInt(value, 10); // Extract the number from the string like '<60'\r\n//       filtered = filtered.filter((s) => s.ssc.percentage <= sscLimit); // Filter by SSC percentage\r\n//     }\r\n  \r\n//     if (key === \"hscPercentage\" && value) {\r\n//       const hscLimit = parseInt(value, 10);\r\n//       filtered = filtered.filter((s) => s.hsc.percentage <= hscLimit); // Filter by HSC percentage\r\n//     }\r\n  \r\n//     if (key === \"bachelorPercentage\" && value) {\r\n//       const bachelorLimit = parseInt(value, 10);\r\n//       filtered = filtered.filter((s) => s.bachelor.percentage <= bachelorLimit); // Filter by Bachelor's percentage\r\n//     }\r\n  \r\n//     if (key === \"drops\" && value) {\r\n//       filtered = filtered.filter((s) => s.drops == parseInt(value, 10)); // Filter by drops\r\n//     }\r\n  \r\n//     setFilteredStudents(filtered); // Update the filtered student list\r\n//   };\r\n\r\n//   // Handling student selection for details view\r\n//   const handleViewStudent = (student) => {\r\n//     setSelectedStudent(student); // Set the selected student\r\n//   };\r\n\r\n//   const renderStudentContent = () => {\r\n//     if (studentOption === \"EnterDetails\") {\r\n//       return <div>Enter Student Details Form</div>;\r\n//     }\r\n\r\n//     if (studentOption === \"ViewDetails\") {\r\n//       if (selectedStudent) {\r\n//         // Render details of the selected student\r\n//         return (\r\n//           <div className=\"viewdetails\">\r\n//             <button\r\n//               className=\"back-btn\"\r\n//               onClick={() => setSelectedStudent(null)} // Go back to table\r\n//             >\r\n//               <img src=\"/Images/Back.png\" height=\"25px\" width=\"25px\" />\r\n              \r\n//             </button>\r\n//             <StudentDetails student={selectedStudent} />\r\n//           </div>\r\n//         );\r\n//       } else {\r\n//         // Render the table to select a student\r\n//         return (\r\n//           <div className=\"viewdetails\">\r\n//             <Filters onFilter={handleFilter} />\r\n//             <StudentTable\r\n//               students={filteredStudents}\r\n//               onView={handleViewStudent} // Trigger view for selected student\r\n//             />\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n\r\n//     if (studentOption === \"DownloadReports\") {\r\n//       return <div>Download Reports Section</div>;\r\n//     }\r\n\r\n//     // Render nothing or a placeholder if no option is selected\r\n//     return <div className=\"placeholder\"></div>;\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"dashboard\">\r\n//       {/* Navigation Buttons */}\r\n//       <div className=\"buttons\">\r\n//         <button onClick={() => handleOptionClick(\"EnterDetails\")}>\r\n//           <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Enter Details\r\n//         </button>\r\n//         <button onClick={() => handleOptionClick(\"DownloadReports\")}>\r\n//           <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Download Reports\r\n//           <img src=\"/Images/download.png\" height=\"18px\" width=\"27px\" />\r\n//         </button>\r\n//         <br />\r\n//         <button onClick={() => handleOptionClick(\"ViewDetails\")}>\r\n//           <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> View Details\r\n//         </button>\r\n//       </div>\r\n\r\n//       {/* Main Section */}\r\n//       <div className=\"main-section\">\r\n//         {renderStudentContent()}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Dashboard;\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}