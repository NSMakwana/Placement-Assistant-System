{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport StudentService from \"../Services/StudentServices\";\nimport StudentTable from \"./StudentTable\";\nimport Filters from \"./Filters\";\nimport { jsPDF } from \"jspdf\"; // Import jsPDF\nimport \"jspdf-autotable\";\nimport StudentDetails from \"./StudentDetails\";\nimport \"./Dashboard.css\";\n\n// const Dashboard = ({ selectedMenu }) => {  // Receive selectedMenu as a prop\n//   const [studentOption, setStudentOption] = useState(\"ViewDetails\"); // Default to \"ViewDetails\"\n//   const [students, setStudents] = useState([]);\n//   const [filteredStudents, setFilteredStudents] = useState([]);\n//   const [selectedStudent, setSelectedStudent] = useState(null); // Track the selected student\n\n//   // Fetching student data from the API on component mount\n//   useEffect(() => {\n//     StudentService.getStudents()\n//       .then((response) => {\n//         setStudents(response.data);\n//         setFilteredStudents(response.data);\n//       })\n//       .catch((error) => console.error(\"Error fetching students:\", error));\n//   }, []);\n\n//   // Handling button click to select options\n//   const handleOptionClick = (option) => {\n//     setStudentOption(option); // Set the currently selected option\n//     setSelectedStudent(null); // Reset selected student when changing options\n//   };\n\n//   // Handling filter logic\n//   const handleFilter = (key, value) => {\n//     let filtered = students;\n\n//     // If value is an empty string, reset the filter\n//     if (value === \"\") {\n//       filtered = students; // Reset to the full list of students\n//     }\n\n//     // Apply each filter condition progressively (AND logic)\n//     if (key === \"batch\" && value) {\n//       filtered = filtered.filter((s) => s.batch === value); // Filter by batch\n//     }\n\n//     if (key === \"program\" && value) {\n//       filtered = filtered.filter((s) => s.course === value); // Filter by program\n//     }\n\n//     if (key === \"search\" && value) {\n//       filtered = filtered.filter((s) =>\n//         s.name.toLowerCase().includes(value.toLowerCase()) // Filter by name\n//       );\n//     }\n\n//     if (key === \"sscPercentage\" && value) {\n//       const sscLimit = parseInt(value, 10); // Extract the number from the string like '<60'\n//       filtered = filtered.filter((s) => s.ssc.percentage <= sscLimit); // Filter by SSC percentage\n//     }\n\n//     if (key === \"hscPercentage\" && value) {\n//       const hscLimit = parseInt(value, 10);\n//       filtered = filtered.filter((s) => s.hsc.percentage <= hscLimit); // Filter by HSC percentage\n//     }\n\n//     if (key === \"bachelorPercentage\" && value) {\n//       const bachelorLimit = parseInt(value, 10);\n//       filtered = filtered.filter((s) => s.bachelor.percentage <= bachelorLimit); // Filter by Bachelor's percentage\n//     }\n\n//     if (key === \"drops\" && value) {\n//       filtered = filtered.filter((s) => s.drops === parseInt(value, 10)); // Filter by drops\n//     }\n\n//     setFilteredStudents(filtered); \n//     // Update the filtered student list\n//     console.log(filtered);\n//   };\n//   //delete student\n//   const onDelete = (eno) => {\n//     const updatedStudents = students.filter((student) => student.eno !== eno);\n//     setStudents(updatedStudents); // Update the state to remove the student\n//     setFilteredStudents(updatedStudents); // Update the filtered list as well\n//   };\n\n//   //downloding filter data\n//   const downloadFilteredCSV = () => {\n//     // Define the CSV header based on your student data fields\n//     const headers = [\n//       \"Sr. No\",\n//       \"Name\",\n//       \"Batch\",\n//       \"Program\",\n//       \"Email\",\n//       \"Phone Number\",\n//       \"Date of Birth\",\n//       \"Gender\",\n//       \"Nationality\",\n//       \"SSC Marks\",\n//       \"SSC Total Marks\",\n//       \"SSC Percentage\",\n//       \"HSC Marks\",\n//       \"HSC Total Marks\",\n//       \"HSC Percentage\",\n//       \"Bachelor Marks\",\n//       \"Bachelor Total Marks\",\n//       \"Bachelor Percentage\",\n//       \"Master Marks\",\n//       \"Master Total Marks\",\n//       \"Master Percentage\",\n//       \"Address Block Number\",\n//       \"Address Building Name\",\n//       \"Address Area\",\n//       \"Address Landmark\",\n//       \"Address Pincode\",\n//       \"Address City\",\n//       \"Address State\",\n//       \"Drops\",\n//       \"Remarks\",\n//     ];\n\n//     // Format filtered student data as CSV rows\n//     const rows = filteredStudents.map((student, index) => [\n//       index + 1,\n//       student.name,\n//       student.batch,\n//       student.course,\n//       student.email,\n//       student.phno,\n//       student.dob,\n//       student.gender,\n//       student.nationality,\n//       student.ssc.marks,\n//       student.ssc.totalMarks,\n//       student.ssc.percentage,\n//       student.hsc.marks,\n//       student.hsc.totalMarks,\n//       student.hsc.percentage,\n//       student.bachelor.marks,\n//       student.bachelor.totalMarks,\n//       student.bachelor.percentage,\n//       student.master.marks,\n//       student.master.totalMarks,\n//       student.master.percentage,\n//       student.address.blockNum,\n//       student.address.buildingName,\n//       student.address.area,\n//       student.address.landmark,\n//       student.address.pincode,\n//       student.address.city,\n//       student.address.state,\n//       student.drops,\n//       student.remarks,\n//     ]);\n\n//     // Combine headers and rows\n//     const csvContent = [\n//       headers.join(\",\"), // Join headers with commas\n//       ...rows.map((row) => row.join(\",\")) // Join each row with commas\n//     ].join(\"\\n\"); // Join all rows with a newline\n\n//     // Create a Blob from the CSV content\n//     const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n//     const url = URL.createObjectURL(blob);\n\n//     // Create a link to trigger the download\n//     const link = document.createElement(\"a\");\n//     link.setAttribute(\"href\", url);\n//     link.setAttribute(\"download\", \"filtered_students_details.csv\"); // Default file name for download\n//     link.click(); // Trigger the download\n//   };\n\n//   const downloadFilteredPDF = () => {\n//     const doc = new jsPDF();\n\n//     // Add title\n//     doc.setFontSize(16);\n//     doc.text(\"Filtered Student Details\", 10, 10);\n\n//     // Define table headers\n//     const headers = [\n//       \"Sr. No\",\n//       \"Name\",\n//       \"Batch\",\n//       \"Program\",\n//       \"Email\",\n//       \"Phone\",\n//       \"SSC %\",\n//       \"HSC %\",\n//       \"Bachelor %\",\n//     ];\n\n//     // Define table rows\n//     const rows = filteredStudents.map((student, index) => [\n//       index + 1,\n//       student.name,\n//       student.batch,\n//       student.course,\n//       student.email,\n//       student.phno,\n//       student.ssc.percentage,\n//       student.hsc.percentage,\n//       student.bachelor.percentage,\n//     ]);\n\n//     // Add table to PDF\n//     doc.autoTable({\n//       head: [headers],\n//       body: rows,\n//       startY: 20, // Start below the title\n//     });\n\n//     // Save the PDF\n//     doc.save(\"filtered_students_details.pdf\");\n//   };\n\n//   // Handling student selection for details view\n//   const handleViewStudent = (student) => {\n//     setSelectedStudent(student); // Set the selected student\n//   };\n\n//   // Render content based on studentOption\n//   const renderStudentContent = () => {\n//     if (studentOption === \"EnterDetails\") {\n//       return <div>Enter Student Details Form</div>;\n//     }\n\n//     if (studentOption === \"ViewDetails\") {\n//       if (selectedStudent) {\n//         return (\n//           <div className=\"viewdetails\">\n//             <button\n//               className=\"back-btn\"\n//               onClick={() => setSelectedStudent(null)} // Go back to table\n//             >\n//               <img src=\"/Images/Back.png\" height=\"25px\" width=\"25px\" />\n//             </button>\n//             <StudentDetails student={selectedStudent} />\n//           </div>\n//         );\n//       } else {\n//         return (\n//           <div className=\"viewdetails\">\n//             <Filters onFilter={handleFilter} downloadCSV={downloadFilteredCSV} downloadPDF={ downloadFilteredPDF}/>\n//             <StudentTable\n//               students={filteredStudents}\n//               onView={handleViewStudent} // Trigger view for selected student\n//               onDelete={onDelete}\n//             />\n//           </div>\n//         );\n//       }\n//     }\n\n//     if (studentOption === \"DownloadReports\") {\n//       return <div>Download Reports Section</div>;\n//     }\n\n//     return null;\n//   };\n\n//   // Main rendering logic\n//   const rendersContent = () => {\n//     if (selectedMenu === \"Student\") {\n//       return (\n//         <>\n\n//           {/* Navigation Buttons for Student Options */}\n//             {/* Breadcrumb */}\n\n//           <div className=\"buttons\">\n//           <div className=\"breadcrumb\">\n//           Dashboard &gt; Student\n//         </div>\n//             <button onClick={() => handleOptionClick(\"EnterDetails\")}>\n//               <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Enter Details\n//             </button>\n//             <button onClick={() => handleOptionClick(\"DownloadReports\")}>\n//               <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Download Reports\n//               <img src=\"/Images/download.png\" height=\"18px\" width=\"27px\" />\n//             </button>\n//             <br />\n//             <button onClick={() => handleOptionClick(\"ViewDetails\")}>\n//               <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> View Details\n//             </button>\n//           </div>\n\n//           {/* Render student-specific content */}\n//           <div className=\"main-section\">{renderStudentContent()}</div>\n//         </>\n//       );\n//     }\n\n//     // Placeholder if no valid menu is selected\n//     return <div className=\"placeholder\">Select an option from the menu</div>;\n//   };\n\n//   return <div className=\"dashboard\">{rendersContent()}</div>;\n// };\n\n// export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","StudentService","StudentTable","Filters","jsPDF","StudentDetails"],"sources":["E:/Nency/MSc CS/Sem-V/Project-III/Test/placement_assistant/src/Components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport StudentService from \"../Services/StudentServices\"; \r\nimport StudentTable from \"./StudentTable\";\r\nimport Filters from \"./Filters\";\r\nimport { jsPDF } from \"jspdf\"; // Import jsPDF\r\nimport \"jspdf-autotable\"; \r\nimport StudentDetails from \"./StudentDetails\";\r\nimport \"./Dashboard.css\";\r\n\r\n// const Dashboard = ({ selectedMenu }) => {  // Receive selectedMenu as a prop\r\n//   const [studentOption, setStudentOption] = useState(\"ViewDetails\"); // Default to \"ViewDetails\"\r\n//   const [students, setStudents] = useState([]);\r\n//   const [filteredStudents, setFilteredStudents] = useState([]);\r\n//   const [selectedStudent, setSelectedStudent] = useState(null); // Track the selected student\r\n\r\n//   // Fetching student data from the API on component mount\r\n//   useEffect(() => {\r\n//     StudentService.getStudents()\r\n//       .then((response) => {\r\n//         setStudents(response.data);\r\n//         setFilteredStudents(response.data);\r\n//       })\r\n//       .catch((error) => console.error(\"Error fetching students:\", error));\r\n//   }, []);\r\n\r\n//   // Handling button click to select options\r\n//   const handleOptionClick = (option) => {\r\n//     setStudentOption(option); // Set the currently selected option\r\n//     setSelectedStudent(null); // Reset selected student when changing options\r\n//   };\r\n\r\n//   // Handling filter logic\r\n//   const handleFilter = (key, value) => {\r\n//     let filtered = students;\r\n\r\n//     // If value is an empty string, reset the filter\r\n//     if (value === \"\") {\r\n//       filtered = students; // Reset to the full list of students\r\n//     }\r\n\r\n//     // Apply each filter condition progressively (AND logic)\r\n//     if (key === \"batch\" && value) {\r\n//       filtered = filtered.filter((s) => s.batch === value); // Filter by batch\r\n//     }\r\n\r\n//     if (key === \"program\" && value) {\r\n//       filtered = filtered.filter((s) => s.course === value); // Filter by program\r\n//     }\r\n\r\n//     if (key === \"search\" && value) {\r\n//       filtered = filtered.filter((s) =>\r\n//         s.name.toLowerCase().includes(value.toLowerCase()) // Filter by name\r\n//       );\r\n//     }\r\n\r\n//     if (key === \"sscPercentage\" && value) {\r\n//       const sscLimit = parseInt(value, 10); // Extract the number from the string like '<60'\r\n//       filtered = filtered.filter((s) => s.ssc.percentage <= sscLimit); // Filter by SSC percentage\r\n//     }\r\n\r\n//     if (key === \"hscPercentage\" && value) {\r\n//       const hscLimit = parseInt(value, 10);\r\n//       filtered = filtered.filter((s) => s.hsc.percentage <= hscLimit); // Filter by HSC percentage\r\n//     }\r\n\r\n//     if (key === \"bachelorPercentage\" && value) {\r\n//       const bachelorLimit = parseInt(value, 10);\r\n//       filtered = filtered.filter((s) => s.bachelor.percentage <= bachelorLimit); // Filter by Bachelor's percentage\r\n//     }\r\n\r\n//     if (key === \"drops\" && value) {\r\n//       filtered = filtered.filter((s) => s.drops === parseInt(value, 10)); // Filter by drops\r\n//     }\r\n\r\n//     setFilteredStudents(filtered); \r\n//     // Update the filtered student list\r\n//     console.log(filtered);\r\n//   };\r\n//   //delete student\r\n//   const onDelete = (eno) => {\r\n//     const updatedStudents = students.filter((student) => student.eno !== eno);\r\n//     setStudents(updatedStudents); // Update the state to remove the student\r\n//     setFilteredStudents(updatedStudents); // Update the filtered list as well\r\n//   };\r\n\r\n//   //downloding filter data\r\n//   const downloadFilteredCSV = () => {\r\n//     // Define the CSV header based on your student data fields\r\n//     const headers = [\r\n//       \"Sr. No\",\r\n//       \"Name\",\r\n//       \"Batch\",\r\n//       \"Program\",\r\n//       \"Email\",\r\n//       \"Phone Number\",\r\n//       \"Date of Birth\",\r\n//       \"Gender\",\r\n//       \"Nationality\",\r\n//       \"SSC Marks\",\r\n//       \"SSC Total Marks\",\r\n//       \"SSC Percentage\",\r\n//       \"HSC Marks\",\r\n//       \"HSC Total Marks\",\r\n//       \"HSC Percentage\",\r\n//       \"Bachelor Marks\",\r\n//       \"Bachelor Total Marks\",\r\n//       \"Bachelor Percentage\",\r\n//       \"Master Marks\",\r\n//       \"Master Total Marks\",\r\n//       \"Master Percentage\",\r\n//       \"Address Block Number\",\r\n//       \"Address Building Name\",\r\n//       \"Address Area\",\r\n//       \"Address Landmark\",\r\n//       \"Address Pincode\",\r\n//       \"Address City\",\r\n//       \"Address State\",\r\n//       \"Drops\",\r\n//       \"Remarks\",\r\n//     ];\r\n  \r\n//     // Format filtered student data as CSV rows\r\n//     const rows = filteredStudents.map((student, index) => [\r\n//       index + 1,\r\n//       student.name,\r\n//       student.batch,\r\n//       student.course,\r\n//       student.email,\r\n//       student.phno,\r\n//       student.dob,\r\n//       student.gender,\r\n//       student.nationality,\r\n//       student.ssc.marks,\r\n//       student.ssc.totalMarks,\r\n//       student.ssc.percentage,\r\n//       student.hsc.marks,\r\n//       student.hsc.totalMarks,\r\n//       student.hsc.percentage,\r\n//       student.bachelor.marks,\r\n//       student.bachelor.totalMarks,\r\n//       student.bachelor.percentage,\r\n//       student.master.marks,\r\n//       student.master.totalMarks,\r\n//       student.master.percentage,\r\n//       student.address.blockNum,\r\n//       student.address.buildingName,\r\n//       student.address.area,\r\n//       student.address.landmark,\r\n//       student.address.pincode,\r\n//       student.address.city,\r\n//       student.address.state,\r\n//       student.drops,\r\n//       student.remarks,\r\n//     ]);\r\n  \r\n//     // Combine headers and rows\r\n//     const csvContent = [\r\n//       headers.join(\",\"), // Join headers with commas\r\n//       ...rows.map((row) => row.join(\",\")) // Join each row with commas\r\n//     ].join(\"\\n\"); // Join all rows with a newline\r\n  \r\n//     // Create a Blob from the CSV content\r\n//     const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n//     const url = URL.createObjectURL(blob);\r\n  \r\n//     // Create a link to trigger the download\r\n//     const link = document.createElement(\"a\");\r\n//     link.setAttribute(\"href\", url);\r\n//     link.setAttribute(\"download\", \"filtered_students_details.csv\"); // Default file name for download\r\n//     link.click(); // Trigger the download\r\n//   };\r\n  \r\n//   const downloadFilteredPDF = () => {\r\n//     const doc = new jsPDF();\r\n\r\n//     // Add title\r\n//     doc.setFontSize(16);\r\n//     doc.text(\"Filtered Student Details\", 10, 10);\r\n\r\n//     // Define table headers\r\n//     const headers = [\r\n//       \"Sr. No\",\r\n//       \"Name\",\r\n//       \"Batch\",\r\n//       \"Program\",\r\n//       \"Email\",\r\n//       \"Phone\",\r\n//       \"SSC %\",\r\n//       \"HSC %\",\r\n//       \"Bachelor %\",\r\n//     ];\r\n\r\n//     // Define table rows\r\n//     const rows = filteredStudents.map((student, index) => [\r\n//       index + 1,\r\n//       student.name,\r\n//       student.batch,\r\n//       student.course,\r\n//       student.email,\r\n//       student.phno,\r\n//       student.ssc.percentage,\r\n//       student.hsc.percentage,\r\n//       student.bachelor.percentage,\r\n//     ]);\r\n\r\n//     // Add table to PDF\r\n//     doc.autoTable({\r\n//       head: [headers],\r\n//       body: rows,\r\n//       startY: 20, // Start below the title\r\n//     });\r\n\r\n//     // Save the PDF\r\n//     doc.save(\"filtered_students_details.pdf\");\r\n//   };\r\n\r\n  \r\n\r\n//   // Handling student selection for details view\r\n//   const handleViewStudent = (student) => {\r\n//     setSelectedStudent(student); // Set the selected student\r\n//   };\r\n\r\n  \r\n//   // Render content based on studentOption\r\n//   const renderStudentContent = () => {\r\n//     if (studentOption === \"EnterDetails\") {\r\n//       return <div>Enter Student Details Form</div>;\r\n//     }\r\n\r\n//     if (studentOption === \"ViewDetails\") {\r\n//       if (selectedStudent) {\r\n//         return (\r\n//           <div className=\"viewdetails\">\r\n//             <button\r\n//               className=\"back-btn\"\r\n//               onClick={() => setSelectedStudent(null)} // Go back to table\r\n//             >\r\n//               <img src=\"/Images/Back.png\" height=\"25px\" width=\"25px\" />\r\n//             </button>\r\n//             <StudentDetails student={selectedStudent} />\r\n//           </div>\r\n//         );\r\n//       } else {\r\n//         return (\r\n//           <div className=\"viewdetails\">\r\n//             <Filters onFilter={handleFilter} downloadCSV={downloadFilteredCSV} downloadPDF={ downloadFilteredPDF}/>\r\n//             <StudentTable\r\n//               students={filteredStudents}\r\n//               onView={handleViewStudent} // Trigger view for selected student\r\n//               onDelete={onDelete}\r\n//             />\r\n//           </div>\r\n//         );\r\n//       }\r\n//     }\r\n\r\n//     if (studentOption === \"DownloadReports\") {\r\n//       return <div>Download Reports Section</div>;\r\n//     }\r\n\r\n//     return null;\r\n//   };\r\n\r\n//   // Main rendering logic\r\n//   const rendersContent = () => {\r\n//     if (selectedMenu === \"Student\") {\r\n//       return (\r\n//         <>\r\n      \r\n//           {/* Navigation Buttons for Student Options */}\r\n//             {/* Breadcrumb */}\r\n        \r\n//           <div className=\"buttons\">\r\n//           <div className=\"breadcrumb\">\r\n//           Dashboard &gt; Student\r\n//         </div>\r\n//             <button onClick={() => handleOptionClick(\"EnterDetails\")}>\r\n//               <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Enter Details\r\n//             </button>\r\n//             <button onClick={() => handleOptionClick(\"DownloadReports\")}>\r\n//               <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Download Reports\r\n//               <img src=\"/Images/download.png\" height=\"18px\" width=\"27px\" />\r\n//             </button>\r\n//             <br />\r\n//             <button onClick={() => handleOptionClick(\"ViewDetails\")}>\r\n//               <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> View Details\r\n//             </button>\r\n//           </div>\r\n\r\n        \r\n\r\n//           {/* Render student-specific content */}\r\n//           <div className=\"main-section\">{renderStudentContent()}</div>\r\n//         </>\r\n//       );\r\n//     }\r\n\r\n//     // Placeholder if no valid menu is selected\r\n//     return <div className=\"placeholder\">Select an option from the menu</div>;\r\n//   };\r\n\r\n//   return <div className=\"dashboard\">{rendersContent()}</div>;\r\n// };\r\n\r\n// export default Dashboard;\r\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,cAAc,MAAM,6BAA6B;AACxD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,OAAO,MAAM,WAAW;AAC/B,SAASC,KAAK,QAAQ,OAAO,CAAC,CAAC;AAC/B,OAAO,iBAAiB;AACxB,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAO,iBAAiB;;AAExignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}