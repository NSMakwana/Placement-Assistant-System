{"ast":null,"code":"var _jsxFileName = \"E:\\\\Nency\\\\MSc CS\\\\Sem-V\\\\Project-III\\\\Test\\\\placement_assistant\\\\src\\\\Components\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport StudentService from \"../Services/StudentServices\";\nimport StudentTable from \"./StudentTable\";\nimport Filters from \"./Filters\";\nimport StudentDetails from \"./StudentDetails\";\nimport \"./Dashboard.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Dashboard = ({\n  selectedMenu\n}) => {\n  _s();\n  // Receive selectedMenu as a prop\n  const [studentOption, setStudentOption] = useState(\"ViewDetails\"); // Default to \"ViewDetails\"\n  const [students, setStudents] = useState([]);\n  const [filteredStudents, setFilteredStudents] = useState([]);\n  const [selectedStudent, setSelectedStudent] = useState(null); // Track the selected student\n\n  // Fetching student data from the API on component mount\n  useEffect(() => {\n    StudentService.getStudents().then(response => {\n      setStudents(response.data);\n      setFilteredStudents(response.data);\n    }).catch(error => console.error(\"Error fetching students:\", error));\n  }, []);\n\n  // Handling button click to select options\n  const handleOptionClick = option => {\n    setStudentOption(option); // Set the currently selected option\n    setSelectedStudent(null); // Reset selected student when changing options\n  };\n\n  // Handling filter logic\n  const handleFilter = (key, value) => {\n    let filtered = students;\n\n    // If value is an empty string, reset the filter\n    if (value === \"\") {\n      filtered = students; // Reset to the full list of students\n    }\n\n    // Apply each filter condition progressively (AND logic)\n    if (key === \"batch\" && value) {\n      filtered = filtered.filter(s => s.batch === value); // Filter by batch\n    }\n    if (key === \"program\" && value) {\n      filtered = filtered.filter(s => s.course === value); // Filter by program\n    }\n    if (key === \"search\" && value) {\n      filtered = filtered.filter(s => s.name.toLowerCase().includes(value.toLowerCase()) // Filter by name\n      );\n    }\n    if (key === \"sscPercentage\" && value) {\n      const sscLimit = parseInt(value, 10); // Extract the number from the string like '<60'\n      filtered = filtered.filter(s => s.ssc.percentage <= sscLimit); // Filter by SSC percentage\n    }\n    if (key === \"hscPercentage\" && value) {\n      const hscLimit = parseInt(value, 10);\n      filtered = filtered.filter(s => s.hsc.percentage <= hscLimit); // Filter by HSC percentage\n    }\n    if (key === \"bachelorPercentage\" && value) {\n      const bachelorLimit = parseInt(value, 10);\n      filtered = filtered.filter(s => s.bachelor.percentage <= bachelorLimit); // Filter by Bachelor's percentage\n    }\n    if (key === \"drops\" && value) {\n      filtered = filtered.filter(s => s.drops === parseInt(value, 10)); // Filter by drops\n    }\n    setFilteredStudents(filtered); // Update the filtered student list\n  };\n  //delete student\n  const onDelete = eno => {\n    const updatedStudents = students.filter(student => student.eno !== eno);\n    setStudents(updatedStudents); // Update the state to remove the student\n    setFilteredStudents(updatedStudents); // Update the filtered list as well\n  };\n\n  //downloding filter data\n  const downloadFilteredCSV = () => {\n    // Define the CSV header based on your student data fields\n    const headers = [\"Sr. No\", \"Name\", \"Batch\", \"Program\", \"Email\", \"Phone Number\", \"Date of Birth\", \"Gender\", \"Nationality\", \"SSC Marks\", \"SSC Total Marks\", \"SSC Percentage\", \"HSC Marks\", \"HSC Total Marks\", \"HSC Percentage\", \"Bachelor Marks\", \"Bachelor Total Marks\", \"Bachelor Percentage\", \"Master Marks\", \"Master Total Marks\", \"Master Percentage\", \"Address Block Number\", \"Address Building Name\", \"Address Area\", \"Address Landmark\", \"Address Pincode\", \"Address City\", \"Address State\", \"Drops\", \"Remarks\"];\n\n    // Format filtered student data as CSV rows\n    const rows = filteredStudents.map((student, index) => [index + 1, student.name, student.batch, student.course, student.email, student.phno, student.dob, student.gender, student.nationality, student.ssc.marks, student.ssc.totalMarks, student.ssc.percentage, student.hsc.marks, student.hsc.totalMarks, student.hsc.percentage, student.bachelor.marks, student.bachelor.totalMarks, student.bachelor.percentage, student.master.marks, student.master.totalMarks, student.master.percentage, student.address.blockNum, student.address.buildingName, student.address.area, student.address.landmark, student.address.pincode, student.address.city, student.address.state, student.drops, student.remarks]);\n\n    // Combine headers and rows\n    const csvContent = [headers.join(\",\"),\n    // Join headers with commas\n    ...rows.map(row => row.join(\",\")) // Join each row with commas\n    ].join(\"\\n\"); // Join all rows with a newline\n\n    // Create a Blob from the CSV content\n    const blob = new Blob([csvContent], {\n      type: \"text/csv;charset=utf-8;\"\n    });\n    const url = URL.createObjectURL(blob);\n\n    // Create a link to trigger the download\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", \"filtered_students_details.csv\"); // Default file name for download\n    link.click(); // Trigger the download\n  };\n\n  // Handling student selection for details view\n  const handleViewStudent = student => {\n    setSelectedStudent(student); // Set the selected student\n  };\n\n  // Render content based on studentOption\n  const renderStudentContent = () => {\n    if (studentOption === \"EnterDetails\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Enter Student Details Form\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 14\n      }, this);\n    }\n    if (studentOption === \"ViewDetails\") {\n      if (selectedStudent) {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"viewdetails\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"back-btn\",\n            onClick: () => setSelectedStudent(null) // Go back to table\n            ,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/Images/Back.png\",\n              height: \"25px\",\n              width: \"25px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 185,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StudentDetails, {\n            student: selectedStudent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"viewdetails\",\n          children: [/*#__PURE__*/_jsxDEV(Filters, {\n            onFilter: handleFilter\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(StudentTable, {\n            students: filteredStudents,\n            onView: handleViewStudent // Trigger view for selected student\n            ,\n            onDelete: onDelete\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 11\n        }, this);\n      }\n    }\n    if (studentOption === \"DownloadReports\") {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Download Reports Section\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 14\n      }, this);\n    }\n    return null;\n  };\n\n  // Main rendering logic\n  const rendersContent = () => {\n    if (selectedMenu === \"Student\") {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleOptionClick(\"EnterDetails\"),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/Images/Side errow.png\",\n              height: \"15px\",\n              width: \"15px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 15\n            }, this), \" Enter Details\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleOptionClick(\"DownloadReports\"),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/Images/Side errow.png\",\n              height: \"15px\",\n              width: \"15px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, this), \" Download Reports\", /*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/Images/download.png\",\n              height: \"18px\",\n              width: \"27px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleOptionClick(\"ViewDetails\"),\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/Images/Side errow.png\",\n              height: \"15px\",\n              width: \"15px\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), \" View Details\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"main-section\",\n          children: renderStudentContent()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true);\n    }\n\n    // Placeholder if no valid menu is selected\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"placeholder\",\n      children: \"Select an option from the menu\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 12\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dashboard\",\n    children: rendersContent()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 10\n  }, this);\n};\n_s(Dashboard, \"cYrHn7MiSwd5/T+fki0D0jlo04s=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","StudentService","StudentTable","Filters","StudentDetails","jsxDEV","_jsxDEV","Fragment","_Fragment","Dashboard","selectedMenu","_s","studentOption","setStudentOption","students","setStudents","filteredStudents","setFilteredStudents","selectedStudent","setSelectedStudent","getStudents","then","response","data","catch","error","console","handleOptionClick","option","handleFilter","key","value","filtered","filter","s","batch","course","name","toLowerCase","includes","sscLimit","parseInt","ssc","percentage","hscLimit","hsc","bachelorLimit","bachelor","drops","onDelete","eno","updatedStudents","student","downloadFilteredCSV","headers","rows","map","index","email","phno","dob","gender","nationality","marks","totalMarks","master","address","blockNum","buildingName","area","landmark","pincode","city","state","remarks","csvContent","join","row","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","setAttribute","click","handleViewStudent","renderStudentContent","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","src","height","width","onFilter","onView","rendersContent","_c","$RefreshReg$"],"sources":["E:/Nency/MSc CS/Sem-V/Project-III/Test/placement_assistant/src/Components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport StudentService from \"../Services/StudentServices\"; \r\nimport StudentTable from \"./StudentTable\";\r\nimport Filters from \"./Filters\";\r\nimport StudentDetails from \"./StudentDetails\";\r\nimport \"./Dashboard.css\";\r\n\r\nconst Dashboard = ({ selectedMenu }) => {  // Receive selectedMenu as a prop\r\n  const [studentOption, setStudentOption] = useState(\"ViewDetails\"); // Default to \"ViewDetails\"\r\n  const [students, setStudents] = useState([]);\r\n  const [filteredStudents, setFilteredStudents] = useState([]);\r\n  const [selectedStudent, setSelectedStudent] = useState(null); // Track the selected student\r\n\r\n  // Fetching student data from the API on component mount\r\n  useEffect(() => {\r\n    StudentService.getStudents()\r\n      .then((response) => {\r\n        setStudents(response.data);\r\n        setFilteredStudents(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching students:\", error));\r\n  }, []);\r\n\r\n  // Handling button click to select options\r\n  const handleOptionClick = (option) => {\r\n    setStudentOption(option); // Set the currently selected option\r\n    setSelectedStudent(null); // Reset selected student when changing options\r\n  };\r\n\r\n  // Handling filter logic\r\n  const handleFilter = (key, value) => {\r\n    let filtered = students;\r\n\r\n    // If value is an empty string, reset the filter\r\n    if (value === \"\") {\r\n      filtered = students; // Reset to the full list of students\r\n    }\r\n\r\n    // Apply each filter condition progressively (AND logic)\r\n    if (key === \"batch\" && value) {\r\n      filtered = filtered.filter((s) => s.batch === value); // Filter by batch\r\n    }\r\n\r\n    if (key === \"program\" && value) {\r\n      filtered = filtered.filter((s) => s.course === value); // Filter by program\r\n    }\r\n\r\n    if (key === \"search\" && value) {\r\n      filtered = filtered.filter((s) =>\r\n        s.name.toLowerCase().includes(value.toLowerCase()) // Filter by name\r\n      );\r\n    }\r\n\r\n    if (key === \"sscPercentage\" && value) {\r\n      const sscLimit = parseInt(value, 10); // Extract the number from the string like '<60'\r\n      filtered = filtered.filter((s) => s.ssc.percentage <= sscLimit); // Filter by SSC percentage\r\n    }\r\n\r\n    if (key === \"hscPercentage\" && value) {\r\n      const hscLimit = parseInt(value, 10);\r\n      filtered = filtered.filter((s) => s.hsc.percentage <= hscLimit); // Filter by HSC percentage\r\n    }\r\n\r\n    if (key === \"bachelorPercentage\" && value) {\r\n      const bachelorLimit = parseInt(value, 10);\r\n      filtered = filtered.filter((s) => s.bachelor.percentage <= bachelorLimit); // Filter by Bachelor's percentage\r\n    }\r\n\r\n    if (key === \"drops\" && value) {\r\n      filtered = filtered.filter((s) => s.drops === parseInt(value, 10)); // Filter by drops\r\n    }\r\n\r\n    setFilteredStudents(filtered); // Update the filtered student list\r\n  };\r\n  //delete student\r\n  const onDelete = (eno) => {\r\n    const updatedStudents = students.filter((student) => student.eno !== eno);\r\n    setStudents(updatedStudents); // Update the state to remove the student\r\n    setFilteredStudents(updatedStudents); // Update the filtered list as well\r\n  };\r\n\r\n  //downloding filter data\r\n  const downloadFilteredCSV = () => {\r\n    // Define the CSV header based on your student data fields\r\n    const headers = [\r\n      \"Sr. No\",\r\n      \"Name\",\r\n      \"Batch\",\r\n      \"Program\",\r\n      \"Email\",\r\n      \"Phone Number\",\r\n      \"Date of Birth\",\r\n      \"Gender\",\r\n      \"Nationality\",\r\n      \"SSC Marks\",\r\n      \"SSC Total Marks\",\r\n      \"SSC Percentage\",\r\n      \"HSC Marks\",\r\n      \"HSC Total Marks\",\r\n      \"HSC Percentage\",\r\n      \"Bachelor Marks\",\r\n      \"Bachelor Total Marks\",\r\n      \"Bachelor Percentage\",\r\n      \"Master Marks\",\r\n      \"Master Total Marks\",\r\n      \"Master Percentage\",\r\n      \"Address Block Number\",\r\n      \"Address Building Name\",\r\n      \"Address Area\",\r\n      \"Address Landmark\",\r\n      \"Address Pincode\",\r\n      \"Address City\",\r\n      \"Address State\",\r\n      \"Drops\",\r\n      \"Remarks\",\r\n    ];\r\n  \r\n    // Format filtered student data as CSV rows\r\n    const rows = filteredStudents.map((student, index) => [\r\n      index + 1,\r\n      student.name,\r\n      student.batch,\r\n      student.course,\r\n      student.email,\r\n      student.phno,\r\n      student.dob,\r\n      student.gender,\r\n      student.nationality,\r\n      student.ssc.marks,\r\n      student.ssc.totalMarks,\r\n      student.ssc.percentage,\r\n      student.hsc.marks,\r\n      student.hsc.totalMarks,\r\n      student.hsc.percentage,\r\n      student.bachelor.marks,\r\n      student.bachelor.totalMarks,\r\n      student.bachelor.percentage,\r\n      student.master.marks,\r\n      student.master.totalMarks,\r\n      student.master.percentage,\r\n      student.address.blockNum,\r\n      student.address.buildingName,\r\n      student.address.area,\r\n      student.address.landmark,\r\n      student.address.pincode,\r\n      student.address.city,\r\n      student.address.state,\r\n      student.drops,\r\n      student.remarks,\r\n    ]);\r\n  \r\n    // Combine headers and rows\r\n    const csvContent = [\r\n      headers.join(\",\"), // Join headers with commas\r\n      ...rows.map((row) => row.join(\",\")) // Join each row with commas\r\n    ].join(\"\\n\"); // Join all rows with a newline\r\n  \r\n    // Create a Blob from the CSV content\r\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\r\n    const url = URL.createObjectURL(blob);\r\n  \r\n    // Create a link to trigger the download\r\n    const link = document.createElement(\"a\");\r\n    link.setAttribute(\"href\", url);\r\n    link.setAttribute(\"download\", \"filtered_students_details.csv\"); // Default file name for download\r\n    link.click(); // Trigger the download\r\n  };\r\n  \r\n  \r\n  // Handling student selection for details view\r\n  const handleViewStudent = (student) => {\r\n    setSelectedStudent(student); // Set the selected student\r\n  };\r\n\r\n  // Render content based on studentOption\r\n  const renderStudentContent = () => {\r\n    if (studentOption === \"EnterDetails\") {\r\n      return <div>Enter Student Details Form</div>;\r\n    }\r\n\r\n    if (studentOption === \"ViewDetails\") {\r\n      if (selectedStudent) {\r\n        return (\r\n          <div className=\"viewdetails\">\r\n            <button\r\n              className=\"back-btn\"\r\n              onClick={() => setSelectedStudent(null)} // Go back to table\r\n            >\r\n              <img src=\"/Images/Back.png\" height=\"25px\" width=\"25px\" />\r\n            </button>\r\n            <StudentDetails student={selectedStudent} />\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div className=\"viewdetails\">\r\n            <Filters onFilter={handleFilter} />\r\n            <StudentTable\r\n              students={filteredStudents}\r\n              onView={handleViewStudent} // Trigger view for selected student\r\n              onDelete={onDelete}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n\r\n    if (studentOption === \"DownloadReports\") {\r\n      return <div>Download Reports Section</div>;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  // Main rendering logic\r\n  const rendersContent = () => {\r\n    if (selectedMenu === \"Student\") {\r\n      return (\r\n        <>\r\n          {/* Navigation Buttons for Student Options */}\r\n          <div className=\"buttons\">\r\n            <button onClick={() => handleOptionClick(\"EnterDetails\")}>\r\n              <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Enter Details\r\n            </button>\r\n            <button onClick={() => handleOptionClick(\"DownloadReports\")}>\r\n              <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> Download Reports\r\n              <img src=\"/Images/download.png\" height=\"18px\" width=\"27px\" />\r\n            </button>\r\n            <br />\r\n            <button onClick={() => handleOptionClick(\"ViewDetails\")}>\r\n              <img src=\"/Images/Side errow.png\" height=\"15px\" width=\"15px\" /> View Details\r\n            </button>\r\n          </div>\r\n\r\n          \r\n\r\n          {/* Render student-specific content */}\r\n          <div className=\"main-section\">{renderStudentContent()}</div>\r\n        </>\r\n      );\r\n    }\r\n\r\n    // Placeholder if no valid menu is selected\r\n    return <div className=\"placeholder\">Select an option from the menu</div>;\r\n  };\r\n\r\n  return <div className=\"dashboard\">{rendersContent()}</div>;\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}